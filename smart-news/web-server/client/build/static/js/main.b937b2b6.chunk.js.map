{"version":3,"sources":["logo.svg","NewsCard/NewsCard.js","NewsPanel/NewsPanel.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewsCard","_this","this","react_default","a","createElement","className","onClick","redirectToUrl","props","news","url","src","urlToImage","alt","title","description","source","reason","class","time","window","open","React","Component","NewsPanel","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleScroll","bind","assertThisInitialized","loadMoreNews","_","debounce","addEventListener","scrollY","pageYOffset","document","documentElement","scrollTop","innerHeight","body","offsetHeight","console","log","_this2","request","Request","method","cache","fetch","then","res","json","newsObj","JSON","parse","setState","concat","news_list","map","key","digest","href","src_NewsCard_NewsCard","renderNews","id","App","src_NewsPanel_NewsPanel","Boolean","location","hostname","match","ReactDOM","render","src_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b937b2b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './NewsCard.css';\nclass NewsCard extends React.Component{\n    render() {\n        return(\n            <div className=\"news-container\" onClick={() => this.redirectToUrl(this.props.news.url)}>\n                <div className=\"row\">\n                    <div className=\"col s4 fill\">\n                        <img src={this.props.news.urlToImage} alt='news'/>\n                    </div>\n                    <div className=\"col s8\">\n                        <div className=\"news-intro-col\">\n                            <div className=\"news-intro-panel\">\n                                <h4>{this.props.news.title}</h4>\n                                <div className=\"news-description\">\n                                    <p>{this.props.news.description}</p>\n                                    <div>\n                                        {this.props.news.source != null && <div className='chip light-blue news-chip'>{this.props.news.source}</div>}\n                                        {this.props.news.reason != null && <div className='chip light-green news-chip'>{this.props.news.reason}</div>}\n                                        {this.props.news.class != null && <div className='chip light-red news-chip'>{this.props.news.class}</div>}\n                                        {this.props.news.time != null && <div className='chip amber news-chip'>{this.props.news.time}</div>}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    redirectToUrl(url) {\n        //this.sendClickLog();\n        window.open(url, '_blank');\n    }\n}\nexport default NewsCard;","//import './NewsPanel.css';\n\nimport NewsCard from '../NewsCard/NewsCard'\nimport _ from 'lodash'\nimport React from 'react';\n\n//import Auth from '../Auth/Auth';\n//import NewsCard from '../NewsCard/NewsCard';\n\nclass NewsPanel extends React.Component{\n    constructor() {\n        super();\n        this.state = {news:null};\n        this.handleScroll = this.handleScroll.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadMoreNews();\n        this.loadMoreNews = _.debounce(this.loadMoreNews,1000);\n        window.addEventListener('scroll', this.handleScroll);\n\n\n    }\n    handleScroll() {\n        let scrollY = window.scrollY || window.pageYOffset || document.documentElement.scrollTop;\n        if ((window.innerHeight + scrollY) >= (document.body.offsetHeight - 50)) {\n            console.log('Loading more news');\n            this.loadMoreNews();\n        }\n    }\n\n    loadMoreNews() {\n         let request = new Request('http://localhost:3000/news', {\n             method: 'GET',\n             cache: 'no-cache'\n         })\n\n        fetch(request)\n            .then ((res) => res.json())\n            .then(news => {\n                console.log(news)\n                var newsObj = JSON.parse ( news['result'] )\n                console.log(newsObj)\n                this.setState({\n\n                    news: this.state.news? this.state.news.concat(newsObj) : newsObj\n                })\n            })\n    }\n\n\n    renderNews() {\n        let news_list = this.state.news.map(function(news) {\n            return(\n                <a className='list-group-item' key = {news.digest} href=\"#\">\n                    <NewsCard news={news} />\n                </a>\n            );\n        });\n\n        return(\n            <div className=\"container-fluid\">\n                <div className='list-group'>\n                    {news_list}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        if (this.state.news) {\n            return(\n                <div>\n                    {this.renderNews()}\n                </div>\n            );\n        } else {\n            return(\n                <div>\n                    <div id='msg-app-loading'>\n                        Loading\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default NewsPanel;\n","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport NewsPanel from '../NewsPanel/NewsPanel'\nimport 'materialize-css/dist/css/materialize.css'\nimport 'materialize-css/dist/js/materialize.js'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <div>\n            {/*<img className='logo' src={logo} alt='logo'/>*/}\n            <div className='container'>\n                <NewsPanel />\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}